import static io.println(int);
import static io.println(String);
import static io.print(String);
import static io.print(int);
import ListNode;
import ListNode.setData(int) boolean;
import ListNode.getData() int;
import ListNode.setSuccessor(ListNode) ListNode;
import ListNode.hasSuccessor() boolean;
import ListNode.getSuccessor() ListNode;
import ListNode.removeSuccessor() ListNode;

class List {	
	
	ListNode head;
	boolean hasHead;
	
	int size;
	
	public static void main(String[] args){ 	
		
		List l;
		l = new List();
		l.push_back(1);
		l.push_back(2);
		l.push_back(3);
		l.printList();
		io.println("Insert in position 2");
		l.insert(2,5);
		l.printList();
		io.println("Pop");
		l.pop_back();
		l.printList();
		io.println("Remove from position 1");
		l.remove(1);
		l.printList();
		io.println("Get element at position 1");
		io.println(l.get(1).getData());
		l.push_back(3);
		l.printList();
		io.println("Get index of 5");
		io.print(l.indexOf(5));

	}	

	public ListNode push_back(int d){
		ListNode node;
		ListNode temp;
		node = new ListNode();
		node.setData(d);
		
		if(!hasHead){
			this.setHead(node);
			size = 1;
		}else{
			temp = this.getTail();
			temp.setSuccessor(node);
		}
		size = size + 1;

		return node;
	}
	
	public ListNode pop_back(){
		ListNode node;
		node = this.getHead();
		while(node.getSuccessor().hasSuccessor())
			node = node.getSuccessor();
		size = size - 1;
		return node.removeSuccessor();
	}
	
	public ListNode getTail(){
		ListNode node;
		node = this.getHead();
		while(node.hasSuccessor())
			node = node.getSuccessor();
		return node;
	}
	
	public boolean printList(){
		ListNode node;
		node = this.getHead();
		io.print("List ");
		io.print(node.getData());
		while(node.hasSuccessor()){
			node = node.getSuccessor();
			io.print(node.getData());
		}
		io.println(" ");
		return true;
	}

	public boolean setHead(ListNode node){
		head = node;
		hasHead = true;
		return true;
	}
	
	public ListNode getHead(){
		return head;
	}
	
	public int getSize(){
		return size;
	}
	
	public int insert(int index, int d){
 	
	ListNode newNode;
	ListNode node;

	 newNode = new ListNode();
 	 newNode.setData(d);

    if (this.eq(index,0)) {
        newNode.setSuccessor(this.getHead());
        this.setHead(newNode);
    } else {
        node = this.getHead();
		index=index-1;
        while (index > 0) {
            node = node.getSuccessor();
			index=index-1;
        }
        newNode.setSuccessor(node.getSuccessor());
        node.setSuccessor(newNode);
    }
		return 0;
	}
	
	public ListNode get(int index){
		ListNode current;
		int i;
		current =  new ListNode();
		if(!(index > 0 && index < size) && !(this.eq(index,size))){}
		else{
			current = this.getHead();
			for (i = 0; i < index; i=i+1) {
				current = current.getSuccessor();
			}
		}
		return current;
	}

	public boolean remove (int index) {
		ListNode current;
		int i;
		boolean b;

		current = new ListNode();
		if (!(index > 0 && index < size) && !(this.eq(index,size))) {
			b = false;
		} else {
	
			current = this.getHead();
			for  (i = 0; i < index - 1; i=i+1) {
				current = current.getSuccessor(); 
			}
			current.setSuccessor(current.getSuccessor().getSuccessor());
			size=size-1;

			b=true;
		}
		return b;

	}

 	public int indexOf(int node) {
        ListNode current;
		int n;
		int value;
		int index;
		current = this.getHead();
		index = 0;
		n=0;

        while (index < this.getSize()) {
            if (this.eq(current.getData(),node)) {
                n = index;
            }else{}
            index=index+1;
            current = current.getSuccessor();
        }
        return n;
    }
	public boolean eq(int a, int b) {
		return (!this.lt(a, b) && !this.lt(b, a));
	}
	
    public boolean lt(int a, int b) {
		return (a < b);
    }
    
	
 }