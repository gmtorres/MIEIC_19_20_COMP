import java.util.List;

/* Generated By:JJTree: Do not edit this line. ASTNEW_IDENTIFIER.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTNEW_IDENTIFIER extends SimpleNode {
  public ASTNEW_IDENTIFIER(int id) {
    super(id);
  }

  public ASTNEW_IDENTIFIER(Jmm p, int id) {
    super(p, id);
  }
  
  public boolean doSemanticAnalysis(StringBuilder info)  throws SemanticException{
	  
	  
	  boolean result = true;
	  
	  if(this.children != null) {
		  for(Node node : this.children) {
			  boolean r = ((SimpleNode) node).doSemanticAnalysis(info);
			  result = result && r;
		  }
	  }
	  
	  if(result == false)
		  return false;
	  
	  this.type = "null";  
	  
	  SimpleNode lhn  = (SimpleNode) this.children[0];
	  SimpleNode rhn  = (SimpleNode) this.children[1];
	  
	  Descriptor d = this.descriptors.getDescriptor(lhn.name);
	  
	  if(d == null) {
		  System.out.println("Error on line " + lhn.lineNo + ", column " + lhn.columnNo + ": Type " + lhn.name + " is not known.");
		  this.decrementMaxErros();
		  return false;
	  }else {
		   
		  List<List<Descriptor>> L = d.getParams();
		  int i = 0;
		  for(; i < L.size();i++) {
			  List<Descriptor> listDesc = L.get(i);
			  if (listDesc.size() != rhn.jjtGetNumChildren()) {
				  if(L.size() == 1) {
					  System.out.println("Error on line " + lhn.lineNo + ", column " + lhn.columnNo + ": Wrong number of parameters in type " + lhn.name);
					  this.decrementMaxErros();
					  return false;
				  }else continue;
			  }
			  else {
				  int ii = 0;
				  for (; ii < rhn.jjtGetNumChildren(); ii++) {
					  SimpleNode rhnc = (SimpleNode) rhn.children[ii];
					  if(!(listDesc.get(ii).getName().equals(((SimpleNode)rhnc.children[0]).type))) {
						  if(L.size() == 1) {
							  System.out.println("Error on line " + lhn.lineNo + ", column " + lhn.columnNo + ": Wrong argument type: " + ((SimpleNode)rhnc.children[0]).type + " should be " + listDesc.get(ii).getName());
							  this.decrementMaxErros();
							  return false;
						  }else break;
					  }
				  }
				  if(ii != rhn.jjtGetNumChildren())
						continue;
					else {
						this.type = d.getName();  
						break;
					}
			  }
		  }
		  if(i == L.size()) {
			  String toPrint = "Error on line " + lhn.lineNo + ", column " + lhn.columnNo + ": Could not find constructor of type: " + lhn.name + "(";
			  for(int a = 0; a < rhn.jjtGetNumChildren(); a++ ) {
					SimpleNode rhnc = (SimpleNode) rhn.children[a];
					toPrint+= ((SimpleNode)rhnc.children[0]).type;
					if(a != rhn.jjtGetNumChildren() - 1 ) toPrint+=", ";
			  }
			  System.out.println(toPrint + ") .");
			  this.decrementMaxErros();
			  return false;
		  }
		  
	  }
	  
	  return result;
  }

}
/* JavaCC - OriginalChecksum=7c73e3b97cb23875cadd21c58e42f93f (do not edit this line) */
