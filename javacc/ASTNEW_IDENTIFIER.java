import java.util.List;

/* Generated By:JJTree: Do not edit this line. ASTNEW_IDENTIFIER.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTNEW_IDENTIFIER extends SimpleNode {
  public ASTNEW_IDENTIFIER(int id) {
    super(id);
  }

  public ASTNEW_IDENTIFIER(Jmm p, int id) {
    super(p, id);
  }
  
  public boolean doSemanticAnalysis(StringBuilder info) {
	  
	  
	  boolean result = true;
	  
	  if(this.children != null) {
		  for(Node node : this.children) {
			  boolean r = ((SimpleNode) node).doSemanticAnalysis(info);
			  result = result && r;
		  }
	  }
	  
	  if(result == false)
		  return false;
	  
	  this.type = "null";  
	  
	  SimpleNode lhn  = (SimpleNode) this.children[0];
	  SimpleNode rhn  = (SimpleNode) this.children[1];
	  
	  Descriptor d = this.descriptors.getDescriptor(lhn.name);
	  
	  if(d == null) {
		  System.out.println(lhn.name + " is not known.");
		  return false;
	  }else {
		   
		  List<Descriptor> listDesc =d.getParams();
		  if (listDesc.size() != rhn.jjtGetNumChildren()) {
			  System.out.println("Wrong number of parameters in type " + lhn.name);
			  return false;
		  }
		  else {
			  int ii = 0;
			  for (; ii < rhn.jjtGetNumChildren(); ii++) {
				  SimpleNode rhnc = (SimpleNode) rhn.children[ii];
				  if(!(listDesc.get(ii).getName().equals(((SimpleNode)rhnc.children[0]).type))) {
					  System.out.println("Wrong argument type: " + ((SimpleNode)rhnc.children[0]).type + " should be " + listDesc.get(ii).getName());
					  return false;
				  }
			  }
			  this.type = d.getName();  
		  }
		  
	  }
	  
	  return result;
  }

}
/* JavaCC - OriginalChecksum=7c73e3b97cb23875cadd21c58e42f93f (do not edit this line) */
