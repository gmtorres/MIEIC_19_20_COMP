options { LOOKAHEAD = 2; }

PARSER_BEGIN(Jmm)

import java.io.InputStream;
import java.io.FileInputStream;
import java.io.File;



public class Jmm {

    public static int max_errors = 10;
    public static boolean failed = false;

    public static void main(String args[]) throws ParseException {   

        	System.out.println("TESTE:");
	        InputStream initialStream = null;
	        try {
	            initialStream = new FileInputStream(new File(args[0]));
	        } catch(Exception e){
	            System.out.println("Could not found file");
	            System.exit(0);
	        }
	        
	        Jmm myJmm = new Jmm(initialStream);     
	        SimpleNode root = myJmm.Program();
	        root.dump("");
	       	System.out.println("LSD");
	       	if(2 == 5){
	       		throw new ParseException();
	       	}
	        
	       

    }
}
//TODO


PARSER_END(Jmm)

SKIP : {  " " | "\r" | "\t" | "\n" | <"//"(~[ "\n", "\r" ]) * ("\n" | "\r" | "\r\n")> |
      <"/*"(~["*"]) * "*"("*" | ~[ "*", "/" ](~["*"]) * "*") * "/"> } 

TOKEN:{
    <CLASS: "class">
    | <MAIN : "main">
    | <IF : "if">
    | <INT : "int">
    | <NEW : "new">
    | <ELSE : "else">
    | <TRUE : "true">
    | <FALSE : "false">
    | <THIS : "this">
    | <WHILE : "while">
    | <STATIC : "static">
    | <PUBLIC : "public">
    | <LENGTH : "length">
    | <RETURN : "return">
    | <IMPORT : "import">
    | <BOOL : "boolean">
    | <EXTENDS : "extends">
    | <VOID : "void">
    | <STRING : "String">

    | <CURLY_BRACE_OPEN : "{">
    | <CURLY_BRACE_CLOSE : "}">
    | <ROUND_BRACE_OPEN : "(">
    | <ROUND_BRACE_CLOSE : ")">
    | <SQUARE_BRACE_OPEN : "[">
    | <SQUARE_BRACE_CLOSE : "]">

    | <NOT : "!">

    | <SEMICOLON : ";">
    | <EQUALS : "=">



    | <IDENTIFIER: ["A"-"Z" , "a"-"z", "_", "$"] (["0"-"9" ,"A"-"Z" , "a"-"z" , "_", "$"])*>
    | <INTEGERLITERAL: (["0"-"9"])+ >
}



SimpleNode Program(): {} {
    (ImportDeclaration() #IMPORT_DEC )* ClassDeclaration() #CLASS_DEC <EOF>  {return jjtThis;}
}

void ImportDeclaration() #void: { Token t1;} {
    <IMPORT> 
    ( <STATIC> 
        t1 = <IDENTIFIER> {  jjtThis.name = t1.image; } #LIB MethodImport()
        | t1 = <IDENTIFIER> {  jjtThis.name = t1.image; } #LIB [MethodImport() ])
     <SEMICOLON> 
}

void MethodImport() #void: {Token t1,t2;} {
    "." t1 = <IDENTIFIER> {  jjtThis.name = t1.image; } #METHOD <ROUND_BRACE_OPEN> [Type() ("," Type())*] #PARAMS <ROUND_BRACE_CLOSE> [Type() #FCNT_RETURN]
}

void ClassDeclaration() #void: {Token t1;} {
    <CLASS> t1 = <IDENTIFIER> {  jjtThis.name = t1.image; } #CLASS_NAME [ <EXTENDS> <IDENTIFIER> ] "{" 
    ( VarDeclaration() #VAR_DEC )* 
    ( MethodDeclaration() #METHOD_DEC )* 
    "}" 
}


void MethodDeclaration() #void: {Token t1,t2,t3;} {
    <PUBLIC>
    (    Type() #RETURN_TYPE t1 = <IDENTIFIER> {  jjtThis.name = t1.image; } #METHOD_NAME 
            "(" [ ( Type() (t2 = <IDENTIFIER> {  jjtThis.name = t2.image; } #PARAM_ID) ("," Type() (t3 = <IDENTIFIER> {  jjtThis.name = t3.image; } #PARAM_ID) )* ) #PARAMS ] ")" "{" 
            MethodBody()
            <RETURN> (Expression() #EXPRESSION) #RETURN_EXPRESSION ";" 
        "}"
    | 
        <STATIC> <VOID> t1 = <MAIN> {  jjtThis.name = t1.image; } #METHOD_NAME "(" <STRING> "[" "]" <IDENTIFIER> ")" "{" 
            MethodBody()
        "}"
    )
    
}

void MethodBody() #void: {} {
    ( VarDeclaration() #VAR_DEC(2) )* 
    ( Statement() )* 
}

void VarDeclaration() #void: {Token t1;} {
    Type()  t1 = <IDENTIFIER>  { jjtThis.name = t1.image; } #IDENTIFIER ";"     
}

void Type() #void: {Token t1;} {
    LOOKAHEAD(2)
    t1 = <INT> "[" "]" {  jjtThis.name = t1.image + "[]" ; } #INT_ARR
    | t1 = <BOOL> {  jjtThis.name = t1.image; } #BOOL
    | t1 = <INT> {  jjtThis.name = t1.image; } #INT
    | t1 = <IDENTIFIER> {  jjtThis.name = t1.image; } #IDENTIFIER
    | t1 = <VOID> {  jjtThis.name = t1.image; } #VOID
}

void Statement() #void: {Token t1;} {
    LOOKAHEAD(2)
    <CURLY_BRACE_OPEN> ( Statement()  )* <CURLY_BRACE_CLOSE>

    | <IF> <ROUND_BRACE_OPEN> ( Expression() #EXPRESSION ) #IF_CONDITION <ROUND_BRACE_CLOSE> 
            Statement() #IF_STATAMENT_BODY 
            <ELSE> Statement() #ELSE_STATEMENT_BODY
    | While()
    
    | ( t1 = <IDENTIFIER>  { jjtThis.name = t1.image; } #IDENTIFIER 
        [ <SQUARE_BRACE_OPEN> ( Expression() #EXPRESSION ) #INDEX <SQUARE_BRACE_CLOSE> ] 
      ) #VAR
        <EQUALS> ( Expression() #EXPRESSION )  #ASSIGN_VAR(2) <SEMICOLON>
    |  Expression() #EXPRESSION <SEMICOLON>
}

void While() #void: {} {
    (<WHILE>
        try {
        <ROUND_BRACE_OPEN> ( Expression() #EXPRESSION )  #WHILE_CONDITION <ROUND_BRACE_CLOSE>
        }
        catch (ParseException e) {
            Jmm.max_errors--;
            Jmm.failed = true;
            System.out.println("Exception on WHILE CONDITION caught.");
            System.out.println(e.toString());  // print the error message
            error_skipto(e, ROUND_BRACE_CLOSE);
            if(Jmm.max_errors == 0)
                throw e;
        }
        Statement() #WHILE_STATEMENT) #WHILE
    
}

void Expression() #void: {Token t1;} {
    ( t1 = <IDENTIFIER> {  jjtThis.name = t1.image; }  #IDENTIFIER
    | t1 = <INTEGERLITERAL> {  jjtThis.val = Integer.parseInt(t1.image); }  #INTEGERLITERAL
    | t1 = <TRUE> {  jjtThis.val = 1; } #BOOL_TRUE
    | t1 = <FALSE> {  jjtThis.val = 0; } #BOOL_FALSE
    | t1 =  <THIS> {  jjtThis.name = t1.image; } #THIS
    | <NEW>( ( <INT> <SQUARE_BRACE_OPEN> Expression() #SIZE <SQUARE_BRACE_CLOSE> ) #NEW_INT_ARR
    |  (t1 = <IDENTIFIER> {  jjtThis.name = t1.image; } #IDENTIFIER <ROUND_BRACE_OPEN> <ROUND_BRACE_CLOSE>) #NEW_IDENTIFIER )

    
    | ( <NOT> Expression() ) #NOT_EXPRESSION
    | <ROUND_BRACE_OPEN>
        try {
             Expression() #PAR_EXPRESSION <ROUND_BRACE_CLOSE> 
        }
        catch (ParseException e) {
            //System.out.println("Exception on ROUND_BRACES caught.");
            error_skipto(e, ROUND_BRACE_CLOSE);
            throw e;
        }
     )
    [ Expression2() ]
}

void Expression2() #void: {Token t1;} {
    "[" Expression() #INDEX "]" [ Expression2() ] 
    | "." ( ( "length" #LENGTH(1) [ Expression2() ] ) |
          ( t1 = <IDENTIFIER> {  jjtThis.name = t1.image; } #FUCTION 
            "(" [ Expression()  ("," Expression() )* ] #PARAM ")" [ Expression2()  ] ) )
    | Aritm() 
    
}

void Aritm() #void : {} {
    "+" Expression() #ADD(2) 
    | "-" Expression() #SUB(2) 
    | "/" Expression() #DIV(2) 
    | "*" Expression() #MULT(2) 
    | "<" Expression() #LESS_THAN(2) 
    | "&&" Expression() #AND(2)
}

JAVACODE
void error_skipto(ParseException e, int kind) {
  //System.out.println(e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
    if(t.kind == ROUND_BRACE_OPEN){
        error_skipto(e,ROUND_BRACE_CLOSE);
    }
  } while (t.kind != kind  && t.kind != EOF);
}