/* Generated By:JJTree: Do not edit this line. ASTOPERATOR.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTOPERATOR extends SimpleNode {
  public ASTOPERATOR(int id) {
    super(id);
  }

  public ASTOPERATOR(Jmm p, int id) {
    super(p, id);
  }
  
  
public boolean doSemanticAnalysis(StringBuilder info) throws SemanticException{
	  
	  
	  boolean result = true;
	  
	  if(this.children != null) {
		  for(Node node : this.children) {
			  boolean r = ((SimpleNode) node).doSemanticAnalysis(info);
			  result = result && r;
		  }
	  }
	  
	  SimpleNode method = (SimpleNode)this.jjtGetParent();
	  while(!method.toString().equals("METHOD")) {
		  method = (SimpleNode)method.jjtGetParent();
	  }
	  
	  SimpleNode lhn  = (SimpleNode) this.children[0];
	  SimpleNode rhn  = (SimpleNode) this.children[1];
	  if(lhn.toString().equals("IDENTIFIER")) {
		  Simbol s = this.simbolTable.getSimbol(lhn.name);
		  if(s == null){
			  System.out.println("Error on line " + lhn.lineNo + ", column " + lhn.columnNo + ": Simbol " + lhn.name + " is not known.");
			  this.decrementMaxErros();
			  return false;
		  }else if(s.isInitialized == false 
				  && !(info.toString().split(" ")[0].equals("IF:") && s.ifInitialized)
				  && !(info.toString().split(" ")[0].equals("ELSE:") && s.elseInitialized)){
			  	
			  if(s.condInitialized || this.simbolTable.getScope(lhn.name).equals("global")) {
				  System.out.println("Warning on line " + lhn.lineNo + ", column " + lhn.columnNo + ": Simbol " + lhn.name + " may not have been initiated.");
			  }else {
				  System.out.println("Error on line " + lhn.lineNo + ", column " + lhn.columnNo + ": Simbol " + lhn.name + " has not been initiated.");
				  this.decrementMaxErros();
				  return false;
			  }
		  }
		  String scope = this.simbolTable.getScope(lhn.name);
		  if(scope.equals("global")) {
			  if(method.is_static) {
				  System.out.println("Error on line " + lhn.lineNo + ", column " + lhn.columnNo + ": Non static variable \"" + lhn.name +"\" cannot be refereced from a static context");
				  this.decrementMaxErros();
				  return false;
			  }
		  }
		  lhn.type = s.getType().getName();
	  }
	  if(rhn.toString().equals("IDENTIFIER")) {
		  Simbol s = this.simbolTable.getSimbol(rhn.name);
		  if(s == null){
			  System.out.println("Error on line " + rhn.lineNo + ", column " + rhn.columnNo + ": Simbol " + rhn.name + " is not known.");
			  return false;
		  }else if(s.isInitialized == false 
				  && !(info.toString().split(" ")[0].equals("IF:") && s.ifInitialized)
				  && !(info.toString().split(" ")[0].equals("ELSE:") && s.elseInitialized)){
				  if(s.condInitialized || this.simbolTable.getScope(rhn.name).equals("global")) {
					  System.out.println("Warning on line " + rhn.lineNo + ", column " + rhn.columnNo + ": Simbol " + rhn.name + " may not have been initiated.");
				  }else {
					  System.out.println("Error on line " + rhn.lineNo + ", column " + rhn.columnNo + ": Simbol " + rhn.name + " has not been initiated.");
					  this.decrementMaxErros();
					  return false;
				  }
		  }
		  String scope = this.simbolTable.getScope(rhn.name);
		  if(scope.equals("global")) {
			  if(method.is_static) {
				  System.out.println("Error on line " + rhn.lineNo + ", column " + rhn.columnNo + ": Non static variable \"" + rhn.name +"\" cannot be refereced from a static context");
				  this.decrementMaxErros();
				  return false;
			  }
		  }
		  rhn.type = s.getType().getName();
		  
	  }
	  
	  if(result == false)
		  return false;
	  
	  //System.out.println(lhn.type + "  " + lhn.toString() + "  " + lhn.name);
	  //System.out.println(rhn.type + "  " + rhn.toString() + "  " + rhn.name);
	  if(!lhn.type.equals(rhn.type)) {
		  System.out.println("Error on line " + this.lineNo + ", column " + this.columnNo + ": Types incompatible " + lhn.type + " " + this.name + " " + rhn.type + ".");
		  this.decrementMaxErros();
		  result = false;
	  }
	  
	  if(this.name.equals("&&") || this.name.equals("||")) {
		  if(!lhn.type.equals("boolean")) { System.out.println("Error on line " + this.lineNo + ", column " + this.columnNo + ": " +  lhn.type  +" operation must be boolean."); result = false; this.decrementMaxErros(); }
		  else if(!lhn.type.equals("boolean")) { System.out.println("Error on line " + this.lineNo + ", column " + this.columnNo + ": " +  rhn.type  + " operation must be boolean."); result = false; this.decrementMaxErros(); }
		  else this.type = "boolean";
	  }else {
		  if(!lhn.type.equals("int") && !lhn.type.equals("float")) { 
			  System.out.println("Error on line " + this.lineNo + ", column " + this.columnNo + ": " + lhn.type  + " operation must be int."); result = false; this.decrementMaxErros(); 
		  }
		  else if(!rhn.type.equals("int") && !rhn.type.equals("float")) { 
			  System.out.println("Error on line " + this.lineNo + ", column " + this.columnNo + ": " +  rhn.type  + " operation must be int."); result = false; this.decrementMaxErros(); 
		  }
		  else
			  if(this.name.equals("<") || this.name.equals(">")) this.type = "boolean";
			  else this.type = rhn.type;
	  }
	  return result;
  }

}
/* JavaCC - OriginalChecksum=ea0b61aa43566c51566716de5ad918ef (do not edit this line) */
