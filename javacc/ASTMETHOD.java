import java.util.ArrayList;
import java.util.List;


/* Generated By:JJTree: Do not edit this line. ASTMETHOD.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTMETHOD extends SimpleNode {
  public ASTMETHOD(int id) {
    super(id);
    this.has_scope = true;
  }

  public ASTMETHOD(Jmm p, int id) {
    super(p, id);
    this.has_scope = true;
  }

  public boolean createTable() throws SemanticException {
	  
	boolean result = true;
	  
	if(this.parent != null) {
		 this.functionTable = ((SimpleNode)this.parent).functionTable;
		 this.descriptors = ((SimpleNode)this.parent).descriptors;
	}
  
	if(this.has_scope == false && this.parent != null) {
		  this.simbolTable = ((SimpleNode)this.parent).simbolTable;
	}
	else if(this.has_scope == true){
	  this.simbolTable = new SimbolTable();
	  if(this.parent != null){
		  this.simbolTable.setParent( ( (SimpleNode)this.parent ).simbolTable);
	  }
	}
	this.simbolTable.setParam(true);

	List<Descriptor> listDesc = new ArrayList<>();
	if(this.children[0].toString().equals("CONSTRUCTOR")) {
		for(int i = 0; i < this.children[0].jjtGetNumChildren() - 1; i++) {
			listDesc.add( new Descriptor(((SimpleNode)((SimpleNode)this.children[0]).children[i]).type, this.simbolTable)); 
		}
	}else
		for(int i = 0; i < this.jjtGetNumChildren() - 1; i++) {
			listDesc.add( new Descriptor(((SimpleNode)this.children[i]).type, this.simbolTable)); 
		}
	
	String name = null;
	if(this.children[0].toString().equals("CONSTRUCTOR")) {
		//System.out.println(this.type + "  " + listDesc.size());
		if(!this.type.equals(((SimpleNode)this.jjtGetParent()).name)) {
			System.out.println("Constructor does not match class name.");
		    this.decrementMaxErros();
		    return false;
		}
		name = "<init>";
		hasConstructor = true;
		Descriptor ds = this.descriptors.getDescriptor(this.type);
		ds.addParams(listDesc);
		ds = this.descriptors.getDescriptor("this");
		ds.addParams(listDesc);
	}else
		name = this.name;

	//if (this.functionTable.addFunction(this.type,this.descriptors.getDescriptor("this").name, this.name, this.simbolTable, this.is_static) == false) {
	if (this.functionTable.addFunction(this.type,this.descriptors.getDescriptor("this").name, name, this.simbolTable, this.is_static, listDesc) == false) {
	    System.out.println(/*"Line " + this.lineNo + ": "+*/ "Error adding function " + this.type + " " + name + ", duplicate method.");
	    this.decrementMaxErros();
	    result = false;
	  }
	
	if(this.children != null) {
	  for(Node node : this.children) {
		  boolean r = ((SimpleNode) node).createTable();
		  result = result && r;
	  }
	}
	
	return result;
  }


}
/* JavaCC - OriginalChecksum=388f83dfa80f76895eee35b7c442ec5f (do not edit this line) */
