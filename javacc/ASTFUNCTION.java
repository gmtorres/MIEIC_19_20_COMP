/* Generated By:JJTree: Do not edit this line. ASTFUNCTION.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.List;
import java.util.ArrayList;

public
class ASTFUNCTION extends SimpleNode {
  public ASTFUNCTION(int id) {
    super(id);
  }

  public ASTFUNCTION(Jmm p, int id) {
    super(p, id);
  }
  
  
  public boolean doSemanticAnalysis(StringBuilder info) {

		boolean result = true;

		if(this.children != null) {
			for(Node node : this.children) {
				boolean r = ((SimpleNode) node).doSemanticAnalysis(info);
				result = result && r;
			}
		}

		if (result == false) {
			return result;
		}
		this.type = "null";
	    SimpleNode lhn  = (SimpleNode) this.children[0];
	    SimpleNode rhn  = (SimpleNode) this.children[1];

		ArrayList<String> objs = new ArrayList<String>();
		if(lhn.name.equals("this")) {
			objs = this.descriptors.getDescriptor("this").getAllTypes();
		}
		else{
			if(this.simbolTable.isSimbolHere(lhn.name)) {
				objs = this.simbolTable.getSimbol(lhn.name).getAssignType().getAllTypes();
			}else {
				objs.add(lhn.name);
			}
		}
		ArrayList<Function> f = new ArrayList<Function>();
		for(int i = 0; i < objs.size();i++)
			if(this.functionTable.isFunctionHere( objs.get(i),this.name))
				f.add(this.functionTable.getFunction(objs.get(i),this.name));
		int i = 0;
		for(;i<f.size();i++) {
			//this.type = f.get(i).getType();
			List<Descriptor> listDesc = f.get(i).getDescriptors();
			if (listDesc.size() != rhn.jjtGetNumChildren()) {
				if(objs.size() == 1)
					System.out.println("Line " + this.lineNo + ": Wrong number of parameters in function " + lhn.name + "." + this.name);
				continue;
			}
			else {
				int ii = 0;
				for (; ii < rhn.jjtGetNumChildren(); ii++) {
					SimpleNode rhnc = (SimpleNode) rhn.children[ii];
					if(!(listDesc.get(ii).getName().equals(((SimpleNode)rhnc.children[0]).type))) {
						if(objs.size() == 1)
							System.out.println("Line " + this.lineNo + ": Wrong argument type: " + ((SimpleNode)rhnc.children[0]).type + " should be " + listDesc.get(ii).getName());
						break;
					}
				}
				if(ii != rhn.jjtGetNumChildren())
					continue;
				else {
					this.type = f.get(i).getType();
					break;
				}
			}
		}
		if(i == f.size()) {
			result = false;
			System.out.println("Line " + this.lineNo + ": Function " + lhn.name + "." + this.name + " is not known.");
		}
	
	  return result;
  }
}
/* JavaCC - OriginalChecksum=ff7d338328dd91daef21bbda214f1c59 (do not edit this line) */
