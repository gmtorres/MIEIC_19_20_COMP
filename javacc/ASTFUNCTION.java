/* Generated By:JJTree: Do not edit this line. ASTFUNCTION.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.List;

public
class ASTFUNCTION extends SimpleNode {
  public ASTFUNCTION(int id) {
    super(id);
  }

  public ASTFUNCTION(Jmm p, int id) {
    super(p, id);
  }
  
  
  public boolean doSemanticAnalysis() {

		boolean result = true;

		if(this.children != null) {
			for(Node node : this.children) {
				boolean r = ((SimpleNode) node).doSemanticAnalysis();
				result = result && r;
			}
		}

		if (result == false) {
			return result;
		}
	  
	  SimpleNode lhn  = (SimpleNode) this.children[0];
	  SimpleNode rhn  = (SimpleNode) this.children[1];

		String obj;
		if(lhn.name.equals("this"))
			obj = "";
		else{
			if(this.simbolTable.isSimbolHere(lhn.name)) {
				obj = this.simbolTable.getSimbol(lhn.name).getType().getName();
			}else
				obj = lhn.name;
		}
		if(this.functionTable.isFunctionHere( obj,this.name ) == false ) {
			System.out.println("Function " + lhn.name + "." + this.name + " is not known.");
			return false;
		}else {
			this.type = this.functionTable.getFunction(obj,this.name).getType();
		}


		List<Descriptor> listDesc = this.functionTable.getFunction(obj,this.name).getDescriptors();
		if (listDesc.size() != rhn.jjtGetNumChildren()) {
			System.out.println("Wrong number of parameters in function " + lhn.name + "." + this.name);
		}
		else {
			for (int i = 0; i < rhn.jjtGetNumChildren(); i++) {
				SimpleNode rhnc = (SimpleNode) rhn.children[i];
				if(!(listDesc.get(i).getName().equals(((SimpleNode)rhnc.children[0]).type))) {
					System.out.println("Wrong argument type: " + ((SimpleNode)rhnc.children[0]).type + " should be " + listDesc.get(i).getName());
				}
			}
		}  
	  return result;
  }
}
/* JavaCC - OriginalChecksum=ff7d338328dd91daef21bbda214f1c59 (do not edit this line) */
